# -*- coding: utf-8 -*-
"""Dm_and_Ml.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1i99Z0E6TwM5WbwXj1596V8UpbXm51G3V
"""

!pip install rdkit-pypi

import numpy as np 
import pandas as pd

# uncomment the below code when running in kaggle

# import os
# for dirname, _, filenames in os.walk('/kaggle/input'):
#     for filename in filenames:
#         print(os.path.join(dirname, filename))

# test_data=pd.read_csv('/kaggle/input/the-toxicity-prediction-challenge-ii/test_II.csv')
# train_data=pd.read_csv('/kaggle/input/the-toxicity-prediction-challenge-ii/train_II.csv')

test_data=pd.read_csv('/content/test_II.csv')
train_data=pd.read_csv('/content/train_II.csv')

train_data.head()

test_data.head()

train_data[['chemical_id','Assay_id']]=train_data.Id.str.split(';',expand=True)
train_data.drop(['Id'],axis=1,inplace=True)
train_data.head()

train_data.isnull().sum()

test_data[['chemical_id','Assay_id']]=test_data.x.str.split(';',expand=True)
test_data.drop(['x'],axis=1,inplace=True)
test_data.head()

train_data.info()

# from sklearn.model_selection import train_test_split

# df_train, X_test = train_test_split( train_data, random_state=104, train_size=0.75, shuffle=True)

# from sklearn.feature_selection import VarianceThreshold
# import numpy as np

# X=train_data

# # Set variance threshold
# thresh = 0.25

# # Apply variance threshold to eliminate low-variance features
# selector = VarianceThreshold(threshold=thresh)
# X_new = selector.fit_transform(X)

# # Get list of remaining features
# features = [i for i, x in enumerate(selector.get_support()) if x]

# print("Remaining features:", len(features))

# remaining_feature_names = list(X.iloc[:, features].columns)

df_train = train_data
# df_train

# test data

import pandas as pd
import rdkit
from rdkit import Chem
from rdkit.Chem import Descriptors
from rdkit.Chem import Lipinski
from rdkit.Chem import GraphDescriptors
df_test  = test_data

def getData(data, dataType):
    des=[]
    for index, row in data.iterrows():
        smiles= row['chemical_id']
        assay_id = row['Assay_id']
            
        mol = Chem.MolFromSmiles(smiles)

        #calculate the molecular descriptors using RDKit
        if mol is not None:
            des.append([assay_id,
                        Descriptors.MaxEStateIndex(mol),
                        Descriptors.MinEStateIndex(mol),
                        Descriptors.MaxAbsEStateIndex(mol),
                        Descriptors.MinAbsEStateIndex(mol),
                        Descriptors.qed(mol),
                        Descriptors.MolWt(mol),
                        Descriptors.HeavyAtomMolWt(mol),
                        Descriptors.ExactMolWt(mol),
                        Descriptors.NumValenceElectrons(mol),
                        Descriptors.NumRadicalElectrons(mol),
                        Descriptors.MaxPartialCharge(mol),
                        Descriptors.MinPartialCharge(mol),
                        Descriptors.MaxAbsPartialCharge(mol),
                        Descriptors.MinAbsPartialCharge(mol),
                        Descriptors.FpDensityMorgan1(mol),
                        Descriptors.FpDensityMorgan2(mol),
                        Descriptors.FpDensityMorgan3(mol),
                        Descriptors.BCUT2D_MWHI(mol),
                        Descriptors.BCUT2D_MWLOW(mol),
                        Descriptors.BCUT2D_CHGHI(mol),
                        Descriptors.BCUT2D_CHGLO(mol),
                        Descriptors.BCUT2D_LOGPHI(mol),
                        Descriptors.BCUT2D_LOGPLOW(mol),
                        Descriptors.BCUT2D_MRHI(mol),
                        Descriptors.BCUT2D_MRLOW(mol),
                        Descriptors.BalabanJ(mol),
                        Descriptors.BertzCT(mol),
                        Descriptors.Chi0(mol),
                        Descriptors.Chi0n(mol),
                        Descriptors.Chi0v(mol),
                        Descriptors.Chi1(mol),
                        Descriptors.Chi1n(mol),
                        Descriptors.Chi1v(mol),
                        Descriptors.Chi2n(mol),
                        Descriptors.Chi2v(mol),
                        Descriptors.Chi3n(mol),
                        Descriptors.Chi3v(mol),
                        Descriptors.Chi4n(mol),
                        Descriptors.Chi4v(mol),
                        Descriptors.HallKierAlpha(mol),
                        Descriptors.Ipc(mol),
                        Descriptors.Kappa1(mol),
                        Descriptors.Kappa2(mol),
                        Descriptors.Kappa3(mol),
                        Descriptors.LabuteASA(mol),
                        Descriptors.PEOE_VSA1(mol),
                        Descriptors.PEOE_VSA10(mol),
                        Descriptors.PEOE_VSA11(mol),
                        Descriptors.PEOE_VSA12(mol),
                        Descriptors.PEOE_VSA13(mol),
                        Descriptors.PEOE_VSA14(mol),
                        Descriptors.PEOE_VSA2(mol),
                        Descriptors.PEOE_VSA3(mol),
                        Descriptors.PEOE_VSA4(mol),
                        Descriptors.PEOE_VSA5(mol),
                        Descriptors.PEOE_VSA6(mol),
                        Descriptors.PEOE_VSA7(mol),
                        Descriptors.PEOE_VSA8(mol),
                        Descriptors.PEOE_VSA9(mol),
                        Descriptors.SMR_VSA1(mol),
                        Descriptors.SMR_VSA10(mol),
                        Descriptors.SMR_VSA2(mol),
                        Descriptors.SMR_VSA3(mol),
                        Descriptors.SMR_VSA4(mol),
                        Descriptors.SMR_VSA5(mol),
                        Descriptors.SMR_VSA6(mol),
                        Descriptors.SMR_VSA7(mol),
                        Descriptors.SMR_VSA8(mol),
                        Descriptors.SMR_VSA9(mol),
                        Descriptors.SlogP_VSA1(mol),
                        Descriptors.SlogP_VSA10(mol),
                        Descriptors.SlogP_VSA11(mol),
                        Descriptors.SlogP_VSA12(mol),
                        Descriptors.SlogP_VSA2(mol),
                        Descriptors.SlogP_VSA3(mol),
                        Descriptors.SlogP_VSA4(mol),
                        Descriptors.SlogP_VSA5(mol),
                        Descriptors.SlogP_VSA6(mol),
                        Descriptors.SlogP_VSA7(mol),
                        Descriptors.SlogP_VSA8(mol),
                        Descriptors.SlogP_VSA9(mol),
                        Descriptors.TPSA(mol),
                        Descriptors.EState_VSA1(mol),
                        Descriptors.EState_VSA10(mol),
                        Descriptors.EState_VSA11(mol),
                        Descriptors.EState_VSA2(mol),
                        Descriptors.EState_VSA3(mol),
                        Descriptors.EState_VSA4(mol),
                        Descriptors.EState_VSA5(mol),
                        Descriptors.EState_VSA6(mol),
                        Descriptors.EState_VSA7(mol),
                        Descriptors.EState_VSA8(mol),
                        Descriptors.EState_VSA9(mol),
                        Descriptors.VSA_EState1(mol),
                        Descriptors.VSA_EState10(mol),
                        Descriptors.VSA_EState2(mol),
                        Descriptors.VSA_EState3(mol),
                        Descriptors.VSA_EState4(mol),
                        Descriptors.VSA_EState5(mol),
                        Descriptors.VSA_EState6(mol),
                        Descriptors.VSA_EState7(mol),
                        Descriptors.VSA_EState8(mol),
                        Descriptors.VSA_EState9(mol),
                        Descriptors.FractionCSP3(mol),
                        Descriptors.HeavyAtomCount(mol),
                        Descriptors.NHOHCount(mol),
                        Descriptors.NOCount(mol),
                        Descriptors.NumAliphaticCarbocycles(mol),
                        Descriptors.NumAliphaticHeterocycles(mol),
                        Descriptors.NumAliphaticRings(mol),
                        Descriptors.NumAromaticCarbocycles(mol),
                        Descriptors.NumAromaticHeterocycles(mol),
                        Descriptors.NumAromaticRings(mol),
                        Descriptors.NumHAcceptors(mol),
                        Descriptors.NumHDonors(mol),
                        Descriptors.NumHeteroatoms(mol),
                        Descriptors.NumRotatableBonds(mol),
                        Descriptors.NumSaturatedCarbocycles(mol),
                        Descriptors.NumSaturatedHeterocycles(mol),
                        Descriptors.NumSaturatedRings(mol),
                        Descriptors.RingCount(mol),
                        Descriptors.MolLogP(mol),
                        Descriptors.MolMR(mol),
                       
                        ])


    descrp_df=pd.DataFrame(des,columns=[
        'assay_id',
        'MaxEStateIndex',
        'MinEStateIndex',
        'MaxAbsEStateIndex',
        'MinAbsEStateIndex',
        'qed',
        'MolWt',
        'HeavyAtomMolWt',
        'ExactMolWt',
        'NumValenceElectrons',
        'NumRadicalElectrons',
        'MaxPartialCharge',
        'MinPartialCharge',
        'MaxAbsPartialCharge',
        'MinAbsPartialCharge',
        'FpDensityMorgan1',
        'FpDensityMorgan2',
        'FpDensityMorgan3',
        'BCUT2D_MWHI',
        'BCUT2D_MWLOW',
        'BCUT2D_CHGHI',
        'BCUT2D_CHGLO',
        'BCUT2D_LOGPHI',
        'BCUT2D_LOGPLOW',
        'BCUT2D_MRHI',
        'BCUT2D_MRLOW',
        'BalabanJ',
        'BertzCT',
        'Chi0',
        'Chi0n',
        'Chi0v',
        'Chi1',
        'Chi1n',
        'Chi1v',
        'Chi2n',
        'Chi2v',
        'Chi3n',
        'Chi3v',
        'Chi4n',
        'Chi4v',
        'HallKierAlpha',
        'Ipc',
        'Kappa1',
        'Kappa2',
        'Kappa3',
        'LabuteASA',
        'PEOE_VSA1',
        'PEOE_VSA10',
        'PEOE_VSA11',
        'PEOE_VSA12',
        'PEOE_VSA13',
        'PEOE_VSA14',
        'PEOE_VSA2',
        'PEOE_VSA3',
        'PEOE_VSA4',
        'PEOE_VSA5',
        'PEOE_VSA6',
        'PEOE_VSA7',
        'PEOE_VSA8',
        'PEOE_VSA9',
        'SMR_VSA1',
        'SMR_VSA10',
        'SMR_VSA2',
        'SMR_VSA3',
        'SMR_VSA4',
        'SMR_VSA5',
        'SMR_VSA6',
        'SMR_VSA7',
        'SMR_VSA8',
        'SMR_VSA9',
        'SlogP_VSA1',
        'SlogP_VSA10',
        'SlogP_VSA11',
        'SlogP_VSA12',
        'SlogP_VSA2',
        'SlogP_VSA3',
        'SlogP_VSA4',
        'SlogP_VSA5',
        'SlogP_VSA6',
        'SlogP_VSA7',
        'SlogP_VSA8',
        'SlogP_VSA9',
        'TPSA',
        'EState_VSA1',
        'EState_VSA10',
        'EState_VSA11',
        'EState_VSA2',
        'EState_VSA3',
        'EState_VSA4',
        'EState_VSA5',
        'EState_VSA6',
        'EState_VSA7',
        'EState_VSA8',
        'EState_VSA9',
        'VSA_EState1',
        'VSA_EState10',
        'VSA_EState2',
        'VSA_EState3',
        'VSA_EState4',
        'VSA_EState5',
        'VSA_EState6',
        'VSA_EState7',
        'VSA_EState8',
        'VSA_EState9',
        'FractionCSP3',
        'HeavyAtomCount',
        'NHOHCount',
        'NOCount',
        'NumAliphaticCarbocycles',
        'NumAliphaticHeterocycles',
        'NumAliphaticRings',
        'NumAromaticCarbocycles',
        'NumAromaticHeterocycles',
        'NumAromaticRings',
        'NumHAcceptors',
        'NumHDonors',
        'NumHeteroatoms',
        'NumRotatableBonds',
        'NumSaturatedCarbocycles',
        'NumSaturatedHeterocycles',
        'NumSaturatedRings',
        'RingCount',
        'MolLogP',
        'MolMR'
        
])
    
    return descrp_df

test_data_1 = getData(df_test,'test')

test_data_1

##ndkit

# train data

import pandas as pd
import rdkit
from rdkit import Chem
from rdkit.Chem import Descriptors
from rdkit.Chem import AllChem


def getData(data, dataType):
    des=[]
    for index, row in data.iterrows():
        smiles= row['chemical_id']
        assay_id = row['Assay_id']
        expected = row['Expected']
            
        mol = Chem.MolFromSmiles(smiles)

        #calculate the molecular descriptors using RDKit
        if mol is not None:
            des.append([assay_id,
                        expected,
                        Descriptors.MaxEStateIndex(mol),
                        Descriptors.MinEStateIndex(mol),
                        Descriptors.MaxAbsEStateIndex(mol),
                        Descriptors.MinAbsEStateIndex(mol),
                        Descriptors.qed(mol),
                        Descriptors.MolWt(mol),
                        Descriptors.HeavyAtomMolWt(mol),
                        Descriptors.ExactMolWt(mol),
                        Descriptors.NumValenceElectrons(mol),
                        Descriptors.NumRadicalElectrons(mol),
                        Descriptors.MaxPartialCharge(mol),
                        Descriptors.MinPartialCharge(mol),
                        Descriptors.MaxAbsPartialCharge(mol),
                        Descriptors.MinAbsPartialCharge(mol),
                        Descriptors.FpDensityMorgan1(mol),
                        Descriptors.FpDensityMorgan2(mol),
                        Descriptors.FpDensityMorgan3(mol),
                        Descriptors.BCUT2D_MWHI(mol),
                        Descriptors.BCUT2D_MWLOW(mol),
                        Descriptors.BCUT2D_CHGHI(mol),
                        Descriptors.BCUT2D_CHGLO(mol),
                        Descriptors.BCUT2D_LOGPHI(mol),
                        Descriptors.BCUT2D_LOGPLOW(mol),
                        Descriptors.BCUT2D_MRHI(mol),
                        Descriptors.BCUT2D_MRLOW(mol),
                        Descriptors.BalabanJ(mol),
                        Descriptors.BertzCT(mol),
                        Descriptors.Chi0(mol),
                        Descriptors.Chi0n(mol),
                        Descriptors.Chi0v(mol),
                        Descriptors.Chi1(mol),
                        Descriptors.Chi1n(mol),
                        Descriptors.Chi1v(mol),
                        Descriptors.Chi2n(mol),
                        Descriptors.Chi2v(mol),
                        Descriptors.Chi3n(mol),
                        Descriptors.Chi3v(mol),
                        Descriptors.Chi4n(mol),
                        Descriptors.Chi4v(mol),
                        Descriptors.HallKierAlpha(mol),
                        Descriptors.Ipc(mol),
                        Descriptors.Kappa1(mol),
                        Descriptors.Kappa2(mol),
                        Descriptors.Kappa3(mol),
                        Descriptors.LabuteASA(mol),
                        Descriptors.PEOE_VSA1(mol),
                        Descriptors.PEOE_VSA10(mol),
                        Descriptors.PEOE_VSA11(mol),
                        Descriptors.PEOE_VSA12(mol),
                        Descriptors.PEOE_VSA13(mol),
                        Descriptors.PEOE_VSA14(mol),
                        Descriptors.PEOE_VSA2(mol),
                        Descriptors.PEOE_VSA3(mol),
                        Descriptors.PEOE_VSA4(mol),
                        Descriptors.PEOE_VSA5(mol),
                        Descriptors.PEOE_VSA6(mol),
                        Descriptors.PEOE_VSA7(mol),
                        Descriptors.PEOE_VSA8(mol),
                        Descriptors.PEOE_VSA9(mol),
                        Descriptors.SMR_VSA1(mol),
                        Descriptors.SMR_VSA10(mol),
                        Descriptors.SMR_VSA2(mol),
                        Descriptors.SMR_VSA3(mol),
                        Descriptors.SMR_VSA4(mol),
                        Descriptors.SMR_VSA5(mol),
                        Descriptors.SMR_VSA6(mol),
                        Descriptors.SMR_VSA7(mol),
                        Descriptors.SMR_VSA8(mol),
                        Descriptors.SMR_VSA9(mol),
                        Descriptors.SlogP_VSA1(mol),
                        Descriptors.SlogP_VSA10(mol),
                        Descriptors.SlogP_VSA11(mol),
                        Descriptors.SlogP_VSA12(mol),
                        Descriptors.SlogP_VSA2(mol),
                        Descriptors.SlogP_VSA3(mol),
                        Descriptors.SlogP_VSA4(mol),
                        Descriptors.SlogP_VSA5(mol),
                        Descriptors.SlogP_VSA6(mol),
                        Descriptors.SlogP_VSA7(mol),
                        Descriptors.SlogP_VSA8(mol),
                        Descriptors.SlogP_VSA9(mol),
                        Descriptors.TPSA(mol),
                        Descriptors.EState_VSA1(mol),
                        Descriptors.EState_VSA10(mol),
                        Descriptors.EState_VSA11(mol),
                        Descriptors.EState_VSA2(mol),
                        Descriptors.EState_VSA3(mol),
                        Descriptors.EState_VSA4(mol),
                        Descriptors.EState_VSA5(mol),
                        Descriptors.EState_VSA6(mol),
                        Descriptors.EState_VSA7(mol),
                        Descriptors.EState_VSA8(mol),
                        Descriptors.EState_VSA9(mol),
                        Descriptors.VSA_EState1(mol),
                        Descriptors.VSA_EState10(mol),
                        Descriptors.VSA_EState2(mol),
                        Descriptors.VSA_EState3(mol),
                        Descriptors.VSA_EState4(mol),
                        Descriptors.VSA_EState5(mol),
                        Descriptors.VSA_EState6(mol),
                        Descriptors.VSA_EState7(mol),
                        Descriptors.VSA_EState8(mol),
                        Descriptors.VSA_EState9(mol),
                        Descriptors.FractionCSP3(mol),
                        Descriptors.HeavyAtomCount(mol),
                        Descriptors.NHOHCount(mol),
                        Descriptors.NOCount(mol),
                        Descriptors.NumAliphaticCarbocycles(mol),
                        Descriptors.NumAliphaticHeterocycles(mol),
                        Descriptors.NumAliphaticRings(mol),
                        Descriptors.NumAromaticCarbocycles(mol),
                        Descriptors.NumAromaticHeterocycles(mol),
                        Descriptors.NumAromaticRings(mol),
                        Descriptors.NumHAcceptors(mol),
                        Descriptors.NumHDonors(mol),
                        Descriptors.NumHeteroatoms(mol),
                        Descriptors.NumRotatableBonds(mol),
                        Descriptors.NumSaturatedCarbocycles(mol),
                        Descriptors.NumSaturatedHeterocycles(mol),
                        Descriptors.NumSaturatedRings(mol),
                        Descriptors.RingCount(mol),
                        Descriptors.MolLogP(mol),
                        Descriptors.MolMR(mol),
                        
                        ])

    descrp_df=pd.DataFrame(des,columns=['assay_id',
                                        'expected', 
                                        'MaxEStateIndex',
                                          'MinEStateIndex',
                                          'MaxAbsEStateIndex',
                                          'MinAbsEStateIndex',
                                          'qed',
                                          'MolWt',
                                          'HeavyAtomMolWt',
                                          'ExactMolWt',
                                          'NumValenceElectrons',
                                          'NumRadicalElectrons',
                                          'MaxPartialCharge',
                                          'MinPartialCharge',
                                          'MaxAbsPartialCharge',
                                          'MinAbsPartialCharge',
                                          'FpDensityMorgan1',
                                          'FpDensityMorgan2',
                                          'FpDensityMorgan3',
                                          'BCUT2D_MWHI',
                                          'BCUT2D_MWLOW',
                                          'BCUT2D_CHGHI',
                                          'BCUT2D_CHGLO',
                                          'BCUT2D_LOGPHI',
                                          'BCUT2D_LOGPLOW',
                                          'BCUT2D_MRHI',
                                          'BCUT2D_MRLOW',
                                          'BalabanJ',
                                          'BertzCT',
                                          'Chi0',
                                          'Chi0n',
                                          'Chi0v',
                                          'Chi1',
                                          'Chi1n',
                                          'Chi1v',
                                          'Chi2n',
                                          'Chi2v',
                                          'Chi3n',
                                          'Chi3v',
                                          'Chi4n',
                                          'Chi4v',
                                          'HallKierAlpha',
                                          'Ipc',
                                          'Kappa1',
                                          'Kappa2',
                                          'Kappa3',
                                          'LabuteASA',
                                          'PEOE_VSA1',
                                          'PEOE_VSA10',
                                          'PEOE_VSA11',
                                          'PEOE_VSA12',
                                          'PEOE_VSA13',
                                          'PEOE_VSA14',
                                          'PEOE_VSA2',
                                          'PEOE_VSA3',
                                          'PEOE_VSA4',
                                          'PEOE_VSA5',
                                          'PEOE_VSA6',
                                          'PEOE_VSA7',
                                          'PEOE_VSA8',
                                          'PEOE_VSA9',
                                          'SMR_VSA1',
                                          'SMR_VSA10',
                                          'SMR_VSA2',
                                          'SMR_VSA3',
                                          'SMR_VSA4',
                                          'SMR_VSA5',
                                          'SMR_VSA6',
                                          'SMR_VSA7',
                                          'SMR_VSA8',
                                          'SMR_VSA9',
                                          'SlogP_VSA1',
                                          'SlogP_VSA10',
                                          'SlogP_VSA11',
                                          'SlogP_VSA12',
                                          'SlogP_VSA2',
                                          'SlogP_VSA3',
                                          'SlogP_VSA4',
                                          'SlogP_VSA5',
                                          'SlogP_VSA6',
                                          'SlogP_VSA7',
                                          'SlogP_VSA8',
                                          'SlogP_VSA9',
                                          'TPSA',
                                          'EState_VSA1',
                                          'EState_VSA10',
                                          'EState_VSA11',
                                          'EState_VSA2',
                                          'EState_VSA3',
                                          'EState_VSA4',
                                          'EState_VSA5',
                                          'EState_VSA6',
                                          'EState_VSA7',
                                          'EState_VSA8',
                                          'EState_VSA9',
                                          'VSA_EState1',
                                          'VSA_EState10',
                                          'VSA_EState2',
                                          'VSA_EState3',
                                          'VSA_EState4',
                                          'VSA_EState5',
                                          'VSA_EState6',
                                          'VSA_EState7',
                                          'VSA_EState8',
                                          'VSA_EState9',
                                          'FractionCSP3',
                                          'HeavyAtomCount',
                                          'NHOHCount',
                                          'NOCount',
                                          'NumAliphaticCarbocycles',
                                          'NumAliphaticHeterocycles',
                                          'NumAliphaticRings',
                                          'NumAromaticCarbocycles',
                                          'NumAromaticHeterocycles',
                                          'NumAromaticRings',
                                          'NumHAcceptors',
                                          'NumHDonors',
                                          'NumHeteroatoms',
                                          'NumRotatableBonds',
                                          'NumSaturatedCarbocycles',
                                          'NumSaturatedHeterocycles',
                                          'NumSaturatedRings',
                                          'RingCount',
                                          'MolLogP',
                                          'MolMR',
                                         
                                  ])
    return descrp_df

train_data_1 = getData(df_train,'train')

train_data_1

train_data_1.replace([np.inf, -np.inf], np.nan, inplace=True)
train_data_1.fillna(0, inplace=True)

test_data_1.replace([np.inf, -np.inf], np.nan, inplace=True)
test_data_1.fillna(0, inplace=True)

train_data_1[['assay_id']] = train_data_1[['assay_id']].apply(pd.to_numeric)
test_data_1[['assay_id']] = test_data_1[['assay_id']].apply(pd.to_numeric)

# expected as label
x_train = train_data_1.drop('expected',axis=1)

y_train = train_data_1['expected']

# from sklearn.neighbors import KNeighborsClassifier
# knn = KNeighborsClassifier(n_neighbors=1)
# knn.fit(x_train, y_train)
# y_pred = knn.predict(test_data_1)
# print('knn', knn.score(x_train,y_train))

# from sklearn.tree import DecisionTreeClassifier
# clfd=DecisionTreeClassifier(random_state=100,max_depth=10,min_samples_leaf=10)
# clfd.fit(x_train,y_train)
# y_pred = clfd.predict(test_data_1)
# clfd.score(x_train,y_train)

# from imblearn.over_sampling import RandomOverSampler
# from imblearn.under_sampling import RandomUnderSampler, NearMiss

# ROS = RandomUnderSampler(random_state=42)
# x_train,y_train = ROS.fit_resample(x_train,y_train)

# from sklearn.ensemble import RandomForestClassifier
# rf = RandomForestClassifier(max_depth=30, random_state=42).fit(x_train,y_train)
# y_pred = rf.predict(test_data_1)
# print(rf.score(x_train,y_train))

from sklearn.datasets import make_hastie_10_2
from sklearn.ensemble import GradientBoostingClassifier
clf = GradientBoostingClassifier(n_estimators=1000, learning_rate=0.01, max_depth=10, min_samples_split=20 , min_samples_leaf=10 ,max_features=0.95, subsample=1).fit(x_train, y_train)
y_pred=clf.predict(test_data_1)
print(clf.score(x_train, y_train))

# !pip install xgboost

# from xgboost import XGBClassifier

# y = y_train.values
# y = np.where(y == 2, 1, 0)

# bst = XGBClassifier(n_estimators=500, max_depth=10, learning_rate=1, objective='binary:logistic')
# # fit model
# bst.fit(x_train, y)
# # make predictions
# preds = bst.predict(test_data_1)
# print(bst.score(x_train, y))

# from xgboost import XGBClassifier
# from sklearn.model_selection import GridSearchCV

# y = y_train.values
# y = np.where(y == 2, 1, 0)

# xgb = XGBClassifier()

# param_grid = {
#     'n_estimators': [1000],
#     'max_depth': [ 7],
#     'learning_rate': [0.5],
#     'subsample': [1],
#     'colsample_bytree': [ 1],
#     'min_child_weight': [5],
#     'gamma': [0.5]
# }

# grid_search = GridSearchCV(estimator = xgb, param_grid = param_grid, cv = 3, n_jobs = -1, verbose = 2)

# grid_search.fit(x_train, y)
# preds = xgb.predict(test_data_1)
# print(xgb.score(x_train, y))

# from sklearn.ensemble import GradientBoostingClassifier
# from sklearn.preprocessing import StandardScaler
# from sklearn.model_selection import train_test_split, GridSearchCV


                      
# X = np.vstack(x_train.values)
# y = y_train.values

# scaler = StandardScaler()
# X_scaled = scaler.fit_transform(X)

# X_train, X_test, y_train, y_test = train_test_split(X_scaled, y, test_size=0.2, random_state=42)

# param_grid = {
#     'n_estimators': [ 500],
#     'learning_rate': [0.2],
#     'max_depth': [7],
#     'min_samples_split': [10],
#     'min_samples_leaf': [5],
# }

# clf = GradientBoostingClassifier(random_state=42)
# grid_search = GridSearchCV(clf, param_grid, cv=5, n_jobs=-1)
# grid_search.fit(X_train, y_train)
# best_clf = grid_search.best_estimator_
# y_pred = best_clf.predict(y_test)
# print(best_clf.score(X_train, y_train))

# # clf = GradientBoostingClassifier(n_estimators=1000, learning_rate=0.75, max_depth=10, min_samples_split=10 , min_samples_leaf=10 ,max_features=0.85, subsample=0.75).fit(x_train, y_train)
# # y_pred=clf.predict(test_data_1)
# # print(clf.score(x_train, y_train))

#Navie Bayes
# from sklearn.naive_bayes import GaussianNB
# gnb = GaussianNB()
# y_pred = gnb.fit(x_train, y_train).predict(test_data_1)
# gnb.score(x_train, y_train)

# from sklearn.svm import SVC
# from sklearn.pipeline import make_pipeline
# from sklearn.preprocessing import StandardScaler
# clf = make_pipeline(StandardScaler(), SVC(gamma='auto'))
# clf.fit(x_train, y_train)
# y_pred = clf.predict(test_data_1)
# clf.score(x_train,y_train)

# from sklearn.model_selection import train_test_split

# sample_train, sample_test = train_test_split( y_train, random_state=104, train_size=0.1944807274528185, shuffle=True)

# sample_train.shape

# y_train.values.reshape(-1,1)

# y_pred.reshape(-1,1)

# from sklearn.metrics import f1_score

# f1_score(sample_train, y_pred)

# # f1_score(y_train, y_pred)

# !pip install seaborn

# import seaborn as so

# # d = {'y_pred': [1, 2], 'f1_score': [5,6]}
# # df = pd.DataFrame(data=d)

# flights = pd.read_csv('/content/f1_score.csv')
# flights.head()




# so.lineplot(
#     data=flights,
#     x="f1_Score", y="y_pred", hue="event",
#     markers=True, dashes=False
# )

# import numpy as np
# import matplotlib.pyplot as plt


# kaggle_score = [46,55,56,58,61,63,67,69,70,75,76,77]
# x = [15,25,35,45,55,65,75,85,92,95,98,100]

# f1_score = [26,35,36,38,41,43,47,49,50,55,56,57]

# # Plot a simple line chart
# plt.plot(kaggle_score, f1_score, 'g', label='kaggle_score')

# # Plot another line on the same chart/graph
# plt.plot(kaggle_score, x, 'r', label='f1_score')

# plt.legend()
# plt.show()

# import numpy as np
# import matplotlib.pyplot as plt
# y1 = [
# 0.4623,
# 0.5674,
# 0.5593,
# 0.61521,
# 0.5846,
# 0.67425,
# 0.76545,
# 0.63621,
# 0.75968,
# 0.69047,
# 0.70045,
# 0.77216]

# y2 = [
# 0.2123,
# 0.3274,
# 0.3893,
# 0.42521,
# 0.3946,
# 0.47425,
# 0.62545,
# 0.48621,
# 0.59968,
# 0.599047,
# 0.60045,
# 0.61216]
# fig, ax = plt.subplots()
# ax.plot(y1, label='accuracy')
# ax.plot(y2, label='F1Score')
# ax.set_title('accuracy vs F1Score')
# ax.set_xlabel('X-axis')
# ax.set_ylabel('Y-axis')
# # Add a legend to distinguish between the two lines
# ax.legend()
# # Show the plot
# plt.show()

# import xgboost as xgb

# y = y_train.values
# y = np.where(y == 2, 1, 0) 

# xgb_model = xgb.XGBClassifier(n_estimators=1000, learning_rate=0.05, max_depth=10, min_child_weight=5, 
#                               gamma=0.5, subsample=0.5, colsample_bytree=0.6, reg_alpha=0.5, reg_lambda=0.5)
# xgb_model.fit(x_train, y)

# y_pred = xgb_model.predict(test_data_1)

# print(xgb_model.score(x_train, y_train))

output=pd.DataFrame({'Id': test_data['chemical_id'].str.cat(test_data.Assay_id.map(str),sep=";"),'Predicted': y_pred})
output.to_csv("my.submission.csv",index=False)
print("Submission was succesfull")